`12-month % Survival` = as.numeric(`12-month % Survival`),
aliveBefore = if_else(is.na(`12-month % Survival`) | is.na(`# frags`), 0, `12-month % Survival` * `# frags`),
aliveNow = if_else(is.na(`2024 post-bleaching % survival`) | aliveBefore == 0, 0, `2024 post-bleaching % survival` * `# frags`),
propSurvival = replace_na(aliveNow / aliveBefore, 0),
propDeadAndMissing = 1 - propSurvival
) %>%
mutate(species = as.factor(species)) %>%
droplevels()
bleachPlot <- bleachCombo %>%
pivot_longer(cols = c("propSurvival", "propDeadAndMissing"), names_to = "monitoringCategory", values_to = "proportion") %>%
mutate_at(c("monitoringCategory"), as.factor) %>%
mutate(`Site ID` = factor(`Site ID`, levels = mixedsort(levels(`Site ID`)))) %>%
select(Deliverable,
species,
Location,
`Site ID`,
monitoringCategory,
proportion)
myColors1 <- c("red3", "green3")
bleachSurvivalPlot2<- ggplot(bleachPlot, aes(x = `Site ID`, y = proportion, fill = monitoringCategory, color = I('black')))+
geom_bar(position = "stack", stat = 'identity', width = 1)+
ggtitle(expression("Post-Bleaching Event Proportional Survival"))+
xlab("Site")+
ylab("Proportional Survival")+
scale_fill_manual(values = myColors1, labels = c("Dead or Missing", "Alive")) +
facet_wrap(Deliverable ~ species, scales = "free_x")
bleachSurvivalPlot3 <- bleachSurvivalPlot2 + theme(
# Title
plot.title = element_text(size = 40, face = "bold"),
# X Axis
axis.text.x = element_text(size = 20, angle = 45, hjust = 1),
axis.title.x = element_text(size = 40, face = "bold"),
# Y Axis
axis.title.y = element_text(size = 40, face = "bold"),
axis.text.y = element_text(colour = "black", size = 30, face = "bold"),
# Axis Lines and Ticks
axis.line = element_line(colour = "black"),
axis.ticks = element_line(color="black"),
# Legend
legend.title = element_blank(),
legend.text = element_text(size = 30, face = "bold", colour = "black"),
legend.position = "bottom",
# Grid and Background
panel.grid.major = element_line(size = 0.3, linetype = 'solid', colour = "black"),
panel.background = element_rect(fill = 'white'),
# Text
text = element_text(size=20, color="black"),
# Text above facets
strip.text = element_text(size = 20))
ggsave("../figures/postBleachingSurvivalNEW.png", plot =bleachSurvivalPlot3, width = 30, height = 30, units = 'in', dpi = 600)
view(bleachCombo1)
view(bleachPlot)
knitr::opts_chunk$set(warning = FALSE, fig.align = 'left')
knitr::opts_knit$set(root.dir = "../data")
options(width = 88)
library(magrittr)
if (!require("pacman")) install.packages("pacman")
pacman::p_load("ggplot2", "googlesheets4", "dplyr", "officer","reshape2", "stringr", "flextable", "gridExtra", "ggpubr", "Rmisc", "rcompanion", "RColorBrewer", "googledrive", "gdata", "readxl", "DescTools","patchwork", "FSA", "rstatix", "tidyverse", "lme4", 'PMCRMplus', "EnvStats", "emmeans", "MuMIn", "sjstats", "lmerTest", "gargle", "FSA", "vegan", "gtools", "lubridate", "data.table", "forcats")
msvsData <- drive_download(
as_id("1Znbr4E6mkO9PFO8q1b9cbcIWseMc-Kw62JkxgDMQp5s"),
path = "../data/2023 post bleaching massive monitoring data.xlsx",
overwrite = TRUE)
acroData <- drive_download(
as_id("1fpsE_0655xguD48cGK6n1ZqSLnI-tw9aHzhbPM9kZ-k"),
path = "../data/2023 Post Bleaching Monitoring.xlsx",
overwrite = TRUE)
msvsBleach1 <- read_excel("../data/2023 post bleaching massive monitoring data.xlsx", na = c("N/A", "have data"), sheet = "massive monitoring summary")
acerBleach1 <- read_excel("../data/2023 Post Bleaching Monitoring.xlsx", na = "N/A", sheet = "State Monitoring Summary ACER")
apalBleach1 <- read_excel("../data/2023 Post Bleaching Monitoring.xlsx", na = "N/A", sheet = "State Monitoring Summary APAL")
msvsBleach <- msvsBleach1 %>%
select(Deliverable,
Location,
`Site ID`,
`# plugs`,
`1-month % Survival`,
`12-month % Survival`,
`Frags dead`,
`Frags missing`,
`2023 rapid post-bleaching monitoring % survival`) %>%
mutate(across(where(is.character), as.factor)) %>%
filter(str_detect(Deliverable, "State")) %>%
dplyr::rename(`# frags` = `# plugs`,
`2024 post-bleaching % survival` = `2023 rapid post-bleaching monitoring % survival`) %>%
mutate(species = "Massives")
acerBleach <- acerBleach1 %>%
select(Deliverable,
Location,
`Site ID`,
`# frags`,
`1-month % Survival`,
`12-month % Survival`,
`2024 post-bleaching # dead`,
`2024 post-bleaching # missing`,
`2024 post-bleaching % survival`) %>%
mutate(across(where(is.character), as.factor)) %>%
filter(str_detect(Deliverable, "State")) %>%
dplyr::rename(`Frags dead` = `2024 post-bleaching # dead`,
`Frags missing` = `2024 post-bleaching # missing`) %>%
mutate(species = "ACER")
msvsBleach <- msvsBleach1 %>%
select(Deliverable,
Location,
`Site ID`,
`# plugs`,
`1-month % Survival`,
`12-month % Survival`,
`Frags dead`,
`Frags missing`,
`2023 rapid post-bleaching monitoring % survival`) %>%
mutate(across(where(is.character), as.factor)) %>%
filter(str_detect(Deliverable, "State")) %>%
dplyr::rename(`# frags` = `# plugs`,
`2024 post-bleaching % survival` = `2023 rapid post-bleaching monitoring % survival`) %>%
mutate(species = "Massives")
acerBleach <- acerBleach1 %>%
select(Deliverable,
Location,
`Site ID`,
`# frags`,
`1-month % Survival`,
`12-month % Survival`,
`2024 post-bleaching # dead`,
`2024 post-bleaching # missing`,
`2024 post-bleaching % survival`) %>%
mutate(across(where(is.character), as.factor)) %>%
filter(str_detect(Deliverable, "State")) %>%
dplyr::rename(`Frags dead` = `2024 post-bleaching # dead`,
`Frags missing` = `2024 post-bleaching # missing`) %>%
mutate(species = "ACER")
apalBleach <- apalBleach1 %>%
select(Deliverable,
Location,
`Site ID`,
`# frags`,
`1-month % Survival`,
`12-month % Survival`,
`# missing...25`,
`# dead...24`,
`2024 post-bleaching % survival`) %>%
mutate(across(where(is.character), as.factor)) %>%
filter(str_detect(Deliverable, "State")) %>%
dplyr::rename(`Frags dead` = `# missing...25`,
`Frags missing` = `# dead...24`) %>%
mutate(species = 'APAL')
bleachCombo1 <- rbind(msvsBleach, acerBleach,apalBleach)
view(bleachCombo1)
apalBleach <- apalBleach1 %>%
select(Deliverable,
Location,
`Site ID`,
`# frags`,
`1-month % Survival`,
`12-month % Survival`,
`# missing...25`,
`# dead...24`,
`2024 post-bleaching % survival`) %>%
mutate(across(where(is.character), as.factor)) %>%
filter(str_detect(Deliverable, "State")) %>%
dplyr::rename(`Frags dead` = `# missing...25`,
`Frags missing` = `# dead...24`) %>%
mutate(species = 'APAL')
msvsBleach <- msvsBleach1 %>%
select(Deliverable,
Location,
`Site ID`,
`# plugs`,
`1-month % Survival`,
`12-month % Survival`,
`Frags dead`,
`Frags missing`,
`2023 rapid post-bleaching monitoring % survival`) %>%
mutate(across(where(is.character), as.factor)) %>%
filter(str_detect(Deliverable, "State")) %>%
dplyr::rename(`# frags` = `# plugs`,
`2024 post-bleaching % survival` = `2023 rapid post-bleaching monitoring % survival`) %>%
mutate(species = "Massives")
acerBleach <- acerBleach1 %>%
select(Deliverable,
Location,
`Site ID`,
`# frags`,
`1-month % Survival`,
`12-month % Survival`,
`2024 post-bleaching # dead`,
`2024 post-bleaching # missing`,
`2024 post-bleaching % survival`) %>%
mutate(across(where(is.character), as.factor)) %>%
filter(str_detect(Deliverable, "State")) %>%
dplyr::rename(`Frags dead` = `2024 post-bleaching # dead`,
`Frags missing` = `2024 post-bleaching # missing`) %>%
mutate(species = "ACER")
view(acerBleach1)
acerBleach1 <- read_excel("../data/2023 Post Bleaching Monitoring.xlsx", na = "N/A", sheet = "State Monitoring Summary ACER")
view(acerBleach1)
?ggplot
hello
if (!require("pacman")) install.packages("pacman")
pacman::p_load("ggplot2", "googlesheets4", "dplyr", "officer","reshape2", "stringr", "flextable", "gridExtra", "ggpubr", "Rmisc", "rcompanion", "RColorBrewer", "googledrive", "gdata", "readxl", "DescTools","patchwork", "FSA", "rstatix", "tidyverse", "lme4", 'PMCRMplus', "EnvStats", "emmeans", "MuMIn", "sjstats", "lmerTest", "gargle", "FSA", "vegan", "gtools", "lubridate", "data.table", "forcats")
hello
install.packages("swirl")
library(swirl)
swirl()
swirl()
5+7
knitr::opts_chunk$set(warning = FALSE, fig.align = 'left')
knitr::opts_knit$set(root.dir = "../data")
options(width = 88)
library(magrittr)
if (!require("pacman")) install.packages("pacman")
pacman::p_load("ggplot2", "googlesheets4", "dplyr", "officer","reshape2", "stringr", "flextable", "gridExtra", "ggpubr", "Rmisc", "rcompanion", "RColorBrewer", "googledrive", "gdata", "readxl", "DescTools","patchwork", "FSA", "rstatix", "tidyverse", "lme4", 'PMCRMplus', "EnvStats", "emmeans", "MuMIn", "sjstats", "lmerTest", "gargle", "FSA", "vegan", "gtools", "lubridate", "data.table", "forcats")
data <- drive_download(
as_id("1b4IWK7tfSt3n8o8NlgJKSDoqj_QkHvKcaJBNz85RBv4"),
path = "../data/outplantData.xlsx",
overwrite = TRUE)
# The start and end dates for this reporting period
reportingStart <- as.Date("2023-07-01")
reportingEnd <- as.Date("2023-12-31")
# APAL Data
apalData <- read_excel("../data/outplantData.xlsx", sheet = "ex-situ Apal outplants")
# ACER Data
acerData <- read_excel("../data/outplantdata.xlsx", sheet = "in-situ Acer outplants", na = c("", "N/A", "NA"))
Y24Data <- read_excel("../data/outplantdata.xlsx", sheet = "2024-Present Lower Keys Outplan", na = c("", "N/A", "NA"))
srdata <- drive_download(
as_id("1f_9toNf8jaN3MbFsu7irqHi0dkIV0jHurAeRFtXi2yA"),
path = "../data/SRoutplantData.xlsx",
overwrite = TRUE)
srDataZ1 <- read_excel("../data/SRoutplantData.xlsx", sheet = "Site Z", na = c("", "N/A", "NA"))
srDataZ <- srDataZ1 %>%
select(`Outplant Date`,
`Site ID`,
Species,
`Monitoring Date`,
`# of frags in cluster`,
`# Dead`,
`# Missing`) %>%
mutate(
` Outplant Date` = as.Date(`Outplant Date`),
`Site ID` = as.factor(`Site ID`),
Species = as.factor(Species)) %>%
filter(!Species %in% c("APAL", "ACER")) %>%
droplevels() %>%
dplyr:: rename(Date = `Outplant Date`,
`1-month Monitoring` = `Monitoring Date`) %>%
group_by(Date, `1-month Monitoring`, `Site ID`) %>%
dplyr::summarize(`# frags` = sum(`# of frags in cluster`),
totalDead = sum(`# Dead`),
totalMissing = sum(`# Missing`)) %>%
mutate(`1-month Survival` = (1-((totalDead+totalMissing)/`# frags`)),
`1-month % Dead` = (totalDead/`# frags`),
`1-month % Missing` = (totalMissing/`# frags`),
Deliverable = "State Yr7",
`General Location` = "Site Z" ) %>%
select(Date, `General Location`, `Site ID`, Deliverable,`# frags`, `1-month Monitoring`, `1-month Survival`, `1-month % Dead`, `1-month % Missing`)
srDataP1 <- read_excel("../data/SRoutplantData.xlsx", sheet = "Site P", na = c("", "N/A", "NA"))
srDataP <- srDataP1 %>%
select(`Outplant Date`,
`Site ID`,
Species,
`Monitoring Date`,
`# of frags in cluster`,
`# Dead`,
`# Missing`) %>%
mutate(
` Outplant Date` = as.Date(`Outplant Date`),
`Site ID` = as.factor(`Site ID`),
Species = as.factor(Species)) %>%
filter(!Species %in% c("APAL", "ACER")) %>%
droplevels() %>%
dplyr:: rename(Date = `Outplant Date`,
`1-month Monitoring` = `Monitoring Date`) %>%
group_by(Date, `1-month Monitoring`, `Site ID`) %>%
dplyr::summarize(`# frags` = sum(`# of frags in cluster`),
totalDead = sum(`# Dead`),
totalMissing = sum(`# Missing`)) %>%
mutate(`1-month Survival` = (1-((totalDead+totalMissing)/`# frags`)),
`1-month % Dead` = (totalDead/`# frags`),
`1-month % Missing` = (totalMissing/`# frags`),
Deliverable = "State Yr7",
`General Location` = "Site P" ) %>%
select(Date, `General Location`, `Site ID`, Deliverable,`# frags`, `1-month Monitoring`, `1-month Survival`, `1-month % Dead`, `1-month % Missing`)
srData <- rbind(srDataP, srDataZ)
stateFrag <- read.csv("../data/stateFrag.csv")
# data <- drive_download(
# as_id("1u13FQRQ6u2vc4bRK6ZlrIGdhLjLvT_L2nAx7zcglWA0"),
#   path = "../data/fraggingData.xlsx",
#   overwrite = TRUE)
# Frag Data 2023
# frag23 <- read_excel("../data/fraggingData.xlsx", sheet = "Fragging 2023", na = "")
#
# # Frag Data 2024
# frag24 <- read_excel("../data/fraggingData.xlsx", sheet = "Fragging 2024", na = "")
#
# stateFrag <- stateFrag1 %>%
#   select(`Reporting Period`,
#          `Date Cut`,
#          Species,
#          `New Genotype`,
#          `New Frag Count`) %>%
#   filter(`Date Cut` >= "2023-07-01" & `Date Cut` <= "2024-06-30") %>%
#   filter(`Reporting Period` %in% c("State Yr7")) %>%
#   mutate_at(c("Reporting Period",
#          "Date Cut",
#           "Species",
#           "New Genotype"), as.factor) %>%
#   mutate_at(c("Date Cut"), as.Date) %>%
#   na.omit()
#   # mutate(MonthYear = format(`Date Cut`, "%b %Y")) %>%
#   # group_by(MonthYear) %>%
#   # mutate(MonthCount = sum(`New Frag Count`))
fragMonth <- stateFrag %>%
select(Date.Cut, Species, New.Genotype, New.Frag.Count) %>%
mutate(Date = as.Date(Date.Cut ,format = "%m/%d/%Y")) %>%
mutate(Species = as.factor(Species)) %>%
mutate(Genotype = as.factor(New.Genotype)) %>%
select(Date, Species, Genotype, New.Frag.Count) %>%
mutate(Month = format(Date, "%Y-%m")) %>%
mutate(Month = as.factor(Month)) %>%
group_by(Month, Species) %>%
dplyr::summarize(totalFrag = sum(New.Frag.Count))
summary<-fragMonth %>%
group_by(Species) %>%
dplyr::summarize(totalFrag = sum(totalFrag))
# write.csv(stateFrag, "../data/stateFrag.csv", row.names = FALSE)
reportingPeriod <- as.factor(c("2023-07", "2023-08", "2023-09", "2023-10", "2023-11", "2023-12", "2024-01", "2024-02", "2024-03", "2024-04", "2024-05", "2024-06"))
# Create a summary dataframe with all combinations of "Month" and "Species"
fragOutputPlot1 <- ggplot(fragMonth, aes(x = Month, y = totalFrag, fill = Species)) +
geom_bar(stat = "identity")+
ggtitle("Fragments Produced")+
xlab("")+
ylab("Number of Fragments Produced")+
scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, by = 1000))
fragOutputPlot <- fragOutputPlot1 + theme(
# Title
plot.title = element_text(size = 40, face = "bold"),
# X Axis
axis.text.x = element_text(size = 40, angle = 45, hjust = 1),
axis.title.x = element_text(size = 20, face = "bold"),
# Y Axis
axis.title.y = element_text(size = 40, face = "bold"),
axis.text.y = element_text(colour = "black", size = 30, face = "bold"),
# Facets <- this will be removed if you don't have facets!
strip.text = element_text(size = 50, face = 'bold'),
strip.background = element_rect(fill = "#D1D0D0"),
# Legend
legend.title = element_text(size = 40, face = "bold"),
legend.text = element_text(size = 30, face = "bold", colour = "black"),
legend.position = "bottom",
# Grid and Background
panel.grid.major = element_line(size = 0.3, linetype = 'solid', colour = "black"),
panel.background = element_rect(fill = '#f3f3f3'),
# Axis Lines and Ticks
axis.line = element_line(colour = "black"),
axis.ticks = element_line(color="black"),
# Text
text = element_text(size=20, color="black"))
ggsave("../figures/fragOutputPlot.png", plot = fragOutputPlot, width = 20, height = 15, units = 'in', dpi = 600)
# Wrangling for the table
fragTab1 <- stateFrag %>%
select(Date.Cut, Species, New.Genotype, New.Frag.Count) %>%
mutate(Date = as.Date(Date.Cut ,format = "%m/%d/%Y")) %>%
mutate(Species = as.factor(Species)) %>%
mutate(Genotype = as.factor(New.Genotype)) %>%
select(Date, Species, Genotype, New.Frag.Count) %>%
mutate(Month = format(Date, "%Y-%m"))  %>%
# group_by(Month, Species, Genotype) %>%
# dplyr::summarize(totalFrag = sum(New.Frag.Count)) %>%
# select(Month, Species, Genotype, totalFrag) %>%
# distinct() %>%
group_by(Month, Species) %>%
mutate(Genos = n_distinct(Genotype)) %>%
ungroup() %>%
select(Month, Species, New.Frag.Count, Genos) %>%
group_by(Month, Species)%>%
group_by(Month, Species, Genos) %>%
dplyr::summarize(totalFrag = sum(New.Frag.Count))
# Making the table
fragTab <- fragTab1 %>%
flextable() %>%
set_header_labels(Data.set = "Data set") %>%
flextable::compose(part = "header", j = "totalFrag", value = as_paragraph("Number of Microfragments\nPropagated")) %>%
flextable::compose(part = "header", j = "Genos", value = as_paragraph("Number of Genotypes\nPropagated")) %>%
autofit() %>%
flextable::font(fontname = "Times New Roman", part = "all") %>%
fontsize(size = 12, part = "all") %>%
bold(part = "header") %>%
align(align = "center", j = "totalFrag") %>%
align(align = 'center', j = "Genos") %>%
set_table_properties(width = 0.8, align = "center", layout = "autofit") %>%
add_footer_row(values = list(Month = "Totals:", "", totalFrag = sum(fragTab1$totalFrag), Genos = sum(fragTab1$Genos)), colwidths = c(1, 1, 1, 1)) %>%
align(align = 'center', part = "footer")
totals <- c("Totals:", "", sum(fragTab1$totalFrag), sum(fragTab1$Genos))
fragDoc = read_docx()
fragDoc = body_add_flextable(fragDoc, value = fragTab)
print(fragDoc, target = "../tables/fragOutputTable.docx")
fragTab
srData # data from our sexual recruits
outplantY24 <- Y24Data %>%
select( Date,
`General Location`,
`Site ID`,
Deliverable,
`# frags`,
`1-month Monitoring`,
`1-month Survival`,
`1-month % Dead`,
`1-month % Missing`,
# `1-month % Plot Survival`
# `12-month Monitoring`,
# `12-month Survival`,
# `12-month % Dead`,
# `12-month % Missing`,
# `12-month % Plot Survival`) %>%)
) %>%
filter(Deliverable %in% c("State Yr7")) %>%
filter(`Site ID` %in% c("HH_3", "JP_1")) %>%
mutate_at(c(#"Year",
"Site ID",
"Deliverable"), as.factor) %>%
droplevels() %>%
# mutate(cum_sum = cumsum(`# frags`)) %>%
mutate(Date = as.Date(Date, "%m %d %Y"))
outplantData1 <- rbind(srData,outplantY24) %>%
as.tibble()
outplantData <- outplantData1 %>%
mutate(cum_sum = base::cumsum(`# frags`)) %>%
mutate(Date = as.Date(Date))
# write.csv(outplantData, "../tables/outplantY24.csv", row.names = FALSE)
deliverables <- c(2000)
cumulativeDeliverables <- c(2000)
outplantY24plot1<- ggplot(outplantData, aes(x = Date, y = cum_sum))+
geom_line(aes(color = "Fragments Outplanted", linetype = 'solid'), linewidth = 3)+
geom_hline(aes(yintercept = cumulativeDeliverables, linetype = 'State Year 7 Outplant Goal', color = 'State Year 7 Outplant Goal'), linewidth = 3)+
scale_y_continuous(limits = c(0, 3000), breaks = seq(0, 3000, by = 500))+
ggtitle(expression("Coral Fragments Outplanted for State Year 7"))+
xlab(" ")+
ylab("Number of fragments outplanted")+
scale_color_manual(values = c('blue', 'black'), name = " ") +
scale_linetype_manual(name = " ", values = c('solid', 'dashed', 'dashed', 'dashed'), guide = "none")
outplantY24plot <- outplantY24plot1 + theme(
# Title
plot.title = element_text(size = 40, face = "bold"),
# X Axis
axis.text.x = element_text(size = 20, angle = 45, hjust = 1),
axis.title.x = element_text(size = 20, face = "bold"),
# Y Axis
axis.title.y = element_text(size = 20, face = "bold"),
axis.text.y = element_text(colour = "black", size = 20, face = "bold"),
# Axis Lines and Ticks
axis.line = element_line(colour = "black"),
axis.ticks = element_line(color="black"),
# Legend
legend.title = element_text(size = 20, face = "bold"),
legend.text = element_text(size = 20, face = "bold", colour = "black"),
legend.position = "bottom",
# Grid and Background
panel.grid.major = element_line(size = 0.3, linetype = 'solid', colour = "black"),
panel.background = element_rect(fill = 'white'),
# Text
text = element_text(size=20, color="black"))
ggsave("../figures/cumulativeY24outplantPlot.png", plot = outplantY24plot, width = 20, height = 15, units = 'in', dpi = 600)
# Wrangling for the table
outplantY24tab1 <- Y24Data %>%
select( Date,
`General Location`,
`Site ID`,
Deliverable,
Lat,
Long,
`# frags`,
`1-month Monitoring`,
`1-month Survival`,
`1-month % Dead`,
`1-month % Missing`,
# `1-month % Plot Survival`
# `12-month Monitoring`,
# `12-month Survival`,
# `12-month % Dead`,
# `12-month % Missing`,
# `12-month % Plot Survival`) %>%)
) %>%
mutate(Date = as.Date(Date)) %>%
filter(Deliverable %in% c("State Yr7")) %>%
select(Date,
`General Location`,
`Site ID`,
Lat,
Long,
`# frags`,
`1-month Monitoring`,
`1-month Survival`,
`1-month % Dead`,
`1-month % Missing`)
# Making the table
outplantY24tab <- outplantData %>%
flextable() %>%
set_header_labels(Data.set = "Data set") %>%
flextable::compose(part = "header", j = "Date", value = as_paragraph("Outplant Date")) %>%
flextable::compose(part = "header", j = "# frags", value = as_paragraph("Number of Corals")) %>%
flextable::compose(part = "header", j = "Lat", value = as_paragraph("Latitude")) %>%
flextable::compose(part = "header", j = "Long", value = as_paragraph("Longitude"))%>%
autofit() %>%
flextable::font(fontname = "Times New Roman", part = "all") %>%
fontsize(size = 12, part = "all") %>%
bold(part = "header") %>%
align(align = "center", j = "# frags") %>%
set_table_properties(width = 1, align = "center", layout = "autofit") %>%
add_footer_row(values = list(`Outplant Date` = "Totals:"," ","","","","","","","",
`Number of Corals` = sum(outplantY24tab1$`# frags`)), colwidths = c(1,1,1,1,1,1,1,1,1,1))
library(explore)
explore()
gewtd()
getwd()
